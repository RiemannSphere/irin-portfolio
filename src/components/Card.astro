---
    const { id, title, image, medium, dimensions, year } = Astro.props;
---

<div class="card">
    <button id={id} class="card-image-preview-button">View</button>

    <img src={image} alt={title} class="card-image" />

    <div class="card-header">
        <div class="card-info">
            <h3 class="card-title">{title}</h3>
            <p class="card-details">
                <span>{medium}</span> • <span>{dimensions}</span> • <span>{year}</span>
            </p>
        </div>
        <div id={`card-like-${id}`} class="card-like">
            <svg id={`like-icon-${id}`} class="like-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/>
            </svg>
            <span id={`like-counter-${id}`} class="like-counter">0</span>
        </div>
    </div>
</div>

<script define:vars={{ id }} is:inline defer type="module">
    import { likedItemsState, addLikedItem, removeLikedItem } from '../../dist/services/state.service.js';
    import { like, unlike } from '../../dist/services/api.service.js';

    likedItemsState.subscribe(state => {
        const cardLike = document.getElementById(`card-like-${id}`);
        
        if (state.errors.length > 0 || state.isLoading) {
            cardLike.style.display = 'none';
            return;
        }

        cardLike.style.display = 'flex';
        
        const likeIcon = document.getElementById(`like-icon-${id}`);
        const likeCounter = document.getElementById(`like-counter-${id}`);

        if (state.items.includes(id)) {
            likeIcon.classList.add('liked');
        }

        if (!state.items.includes(id)) {
            likeIcon.classList.remove('liked');
        }

        likeCounter.textContent = state.likesCounts[id]?.toString() || '0';
    });

    const likeIcon = document.getElementById(`like-icon-${id}`);

    likeIcon.addEventListener('click', (e) => {
        e.preventDefault();
        if (likeIcon.classList.contains('liked')) {
            likeIcon.classList.remove('liked');
            removeLikedItem(id);
            unlike(id);
        } else {
            likeIcon.classList.add('liked');
            addLikedItem(id);
            like(id);
        }
    });
</script>

<style>
    .card {
        position: relative;
        padding: var(--sp);
        background-color: var(--color-bg);
        border-radius: 8px;
        box-shadow: 0 0 10px 0 var(--color-muted);
        transition: box-shadow 0.2s ease, border-color 0.2s ease;
        border: 2px solid transparent;
    }

    .card-image-preview-button {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(255, 255, 255, 0.9);
        cursor: pointer;
        border: 2px solid var(--color-text);
        border-radius: 20px;
        padding: var(--sp-0-5) var(--sp-0-8);
        color: var(--color-text);
        font-size: var(--sp-0-8);
        font-weight: 700;
        transition: all 0.1s ease-out;
        opacity: 0.8;
    }

    @media screen and (min-width: 768px) {
        .card-image-preview-button:hover {
            color: var(--color-palette-teal-accent);
            border-color: var(--color-palette-teal-accent);
            transform: scale(1.05);
        }
    }

    .card-image {
        width: 100%;
        min-width: 250px;
        margin: auto;
        aspect-ratio: 1.618;
        object-fit: contain;
    }
    
    .card-header {
        display: flex;
        align-items: center;
        gap: var(--sp-0-5);
    }

    .card-info {
        flex: 1;
    }

    .card-title {
        font-size: var(--sp);
        font-weight: 600;
        color: var(--color-text);
        margin: 0;
        line-height: 1.2;
    }

    .card-details {
        font-size: var(--sp-0-8);
        color: var(--color-text);
        opacity: 0.7;
        margin: 0;
        word-break: keep-all;
    }

    .card-details span {
        display: inline-block;
    }

    .card-like {
        display: none; /* hide initially in case of errors */
        flex-direction: column;
        align-items: center;
        gap: 0;
        flex-shrink: 0;
    }

    .like-icon {
        color: var(--color-text);
        transition: all 0.1s ease-out;
        cursor: pointer;
    }

    .like-icon.liked {
        stroke: var(--color-palette-red);
        fill: var(--color-palette-red);
        animation: explode 0.2s ease-in-out;
    }

    @media screen and (min-width: 768px) {
        .like-icon:hover {
            color: var(--color-palette-red);
            transform: scale(1.2);
            filter: drop-shadow(0 0 8px var(--color-palette-red));
        }
    }

    @keyframes explode {
        0% { transform: scale(1.2); }
        50% { transform: scale(2.5); }
        100% { transform: scale(1); }
    }

    .like-counter {
        font-size: var(--sp-0-8);
        color: var(--color-text);
        font-weight: 500;
    }
</style>